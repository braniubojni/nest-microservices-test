services:
  mongodb:
    image: mongo:7
    container_name: mongodb
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
      - '8001:8001'
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - '5540:5540'
    restart: unless-stopped
    networks:
      - microservices-network

  service-a:
    build:
      context: .
      dockerfile: apps/service-a/Dockerfile
    container_name: service-a
    restart: always
    ports:
      - '${SERVICE_A_PORT:-3000}:${SERVICE_A_PORT:-3000}'
    env_file:
      - .env.development
    environment:
      NODE_ENV: production
      SERVICE_NAME: service-a
      MONGO_HOST: mongodb
      REDIS_HOST: redis
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./data:/app/data
    networks:
      - microservices-network

  service-b:
    build:
      context: .
      dockerfile: apps/service-b/Dockerfile
    container_name: service-b
    restart: always
    ports:
      - '${SERVICE_B_PORT:-3001}:${SERVICE_B_PORT:-3001}'
    env_file:
      - .env.development
    environment:
      NODE_ENV: production
      SERVICE_NAME: service-b
      MONGO_HOST: mongodb
      REDIS_HOST: redis
    depends_on:
      - mongodb
      - redis
      - service-a
    volumes:
      - ./reports:/app/reports
    networks:
      - microservices-network

volumes:
  mongodb_data:
  redis_data:

networks:
  microservices-network:
    driver: bridge
